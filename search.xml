<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JavaSE重点</title>
    <url>/2021/04/14/JavaSE%E9%87%8D%E7%82%B9/</url>
    <content><![CDATA[<h5 id="1-error-和-exception-有啥区别"><a href="#1-error-和-exception-有啥区别" class="headerlink" title="1.error 和 exception 有啥区别"></a>1.error 和 exception 有啥区别</h5><h5 id="2-hash-扩容"><a href="#2-hash-扩容" class="headerlink" title="2.hash 扩容"></a>2.hash 扩容</h5><span id="more"></span>

<hr>
<h5 id="3-Java-和-JavaScript-有啥区别"><a href="#3-Java-和-JavaScript-有啥区别" class="headerlink" title="3.Java 和 JavaScript 有啥区别"></a>3.Java 和 JavaScript 有啥区别</h5><blockquote>
<p><a href="http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html">http://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html</a></p>
</blockquote>
<ul>
<li><p>它们的相同之处包括：</p>
<ul>
<li>它们的语法和 C 语言都很相似；</li>
<li>它们都是面向对象的（虽然实现的方式略有不同）；</li>
<li>JavaScript 在设计时参照了 Java 的命名规则；   </li>
</ul>
</li>
<li><p>它们的不同之处包括：</p>
<ul>
<li> JavaScript 是动态类型语言，而 Java 是静态类型语言；</li>
<li>JavaScript 是弱类型的，Java 属于强类型；</li>
<li>JavaScript 的面向对象是基于原型的（prototype-based）实现的，Java 是基于类（class-based）的；</li>
</ul>
</li>
</ul>
<hr>
<h5 id="4-final，finally，finalized-的区别"><a href="#4-final，finally，finalized-的区别" class="headerlink" title="4.final，finally，finalized 的区别"></a>4.final，finally，finalized 的区别</h5><h5 id="5-final的特点及应用"><a href="#5-final的特点及应用" class="headerlink" title="5.final的特点及应用"></a>5.final的特点及应用</h5><p>final可以修饰类/方法/局部变量/成员变量</p>
<ul>
<li><p>对于类来说：如果用final修饰，则当前类不能有任何子类，那么其中的所有成员方法都不能覆盖重写</p>
</li>
<li><p>对于方法来说：当用final来修饰方法时，则该方法是最终方法。</p>
</li>
</ul>
<blockquote>
<p>注意：对于类与方法来说，abstract与final不能同时使用。</p>
</blockquote>
<ul>
<li>对于局部变量来说：一次赋值，终身不变。同时，对于基本数据类型来说，不可变说的是数据不变。对于引用类型来说，不可变说的是地址值不变。</li>
<li> 对于成员变量来说：一定要进行手动赋值，要么通过构造方法赋值，要么直接赋值。</li>
</ul>
<hr>
<h5 id="6-修饰符使用范围"><a href="#6-修饰符使用范围" class="headerlink" title="6.修饰符使用范围"></a>6.修饰符使用范围</h5><table>
<thead>
<tr>
<th>关键字</th>
<th>private</th>
<th>default</th>
<th>protected</th>
<th>public</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td>本类当中/我自己</td>
<td>同一个包/我邻居</td>
<td>不同包子类/我儿子</td>
<td>不同包不同类/陌生人</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用快捷键</title>
    <url>/2021/03/25/IDEA%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>快捷键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Alt+Enter</td>
<td>导入包，错误修复</td>
</tr>
<tr>
<td>Ctrl+Y</td>
<td>删除当前行</td>
</tr>
<tr>
<td>Ctrl+D</td>
<td>复制当前行</td>
</tr>
<tr>
<td>Ctrl+Alt+L（自定义：Alt+F）</td>
<td>格式化代码</td>
</tr>
<tr>
<td>Ctrl+/</td>
<td>单行注释</td>
</tr>
<tr>
<td>Ctrl+Shift+/</td>
<td>多行注释</td>
</tr>
<tr>
<td>Alt+Insert</td>
<td>自动生成代码，get，set方法</td>
</tr>
<tr>
<td>ALt+Shift+上下箭头</td>
<td>移动当前代码行</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>学习</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础--为什么main方法要使用static关键字</title>
    <url>/2021/03/20/Java%E5%9F%BA%E7%A1%80--%E4%B8%BA%E4%BB%80%E4%B9%88main%E6%96%B9%E6%B3%95%E8%A6%81%E4%BD%BF%E7%94%A8static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
    <content><![CDATA[<ul>
<li>为什么 main 方法是静态的（static）？</li>
<li>为什么main方法是公有的（public） ？</li>
<li>为什么 main 方法没有返回值（Void）？</li>
<li>总结</li>
</ul>
<span id="more"></span>

<hr>
<p>Main 方法是我们学习 Java 编程语言时知道的第一个方法，你是否曾经想过为什么 main 方法是 public、static、void 的。当然，很多人首先学的是 C 和 C++，但是在 Java 中 main 方法与前者有些细微的不同，它不会返回任何值，为什么 main 方式是 public、static、void，这篇文章尝试去找到一些答案。</p>
<p>Main 方法是 Java 程序的入口，记住，我们这里不会讨论 Servlet、MIDlet 和其他任何容器管理的 java 程序，在 java 核心编程中，JVM 会查找类中的 public static void main(String[]args)，如果找不到该方法就抛出错误 NoSuchMethodError:main 程序终止。</p>
<p>Main 方法必须严格遵循它的语法规则，方法签名必须是 public static void，参数是字符串数组类型，如果是 Java1.5 及以后的版本还可以使用可变参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static void main(String... args)</span><br></pre></td></tr></table></figure>

<h1 id="为什么-main-方法是静态的（static）？"><a href="#为什么-main-方法是静态的（static）？" class="headerlink" title="为什么 main 方法是静态的（static）？"></a>为什么 main 方法是静态的（static）？</h1><p>1.正因为 main 方法是静态的，JVM 调用这个方法就不需要创建任何包含这个 main 方法的实例。</p>
<p>2.因为 C 和 C++ 同样有类似的 main 方法作为程序执行的入口。</p>
<p>3.如果 main 方法不声明为静态的，JVM 就必须创建 main 类的实例，因为构造器可以被重载，JVM 就没法确定调用哪个 main 方法。</p>
<p>4.静态方法和静态数据加载到内存就可以直接调用而不需要像实例方法一样创建实例后才能调用，如果 main 方法是静态的，那么它就会被加载到 JVM 上下文中成为可执行的方法。</p>
<h1 id="为什么main方法是公有的（public）-？"><a href="#为什么main方法是公有的（public）-？" class="headerlink" title="为什么main方法是公有的（public） ？"></a>为什么main方法是公有的（public） ？</h1><p>Java 指定了一些可访问的修饰符如：private、protected、public，任何方法或变量都可以声明为 public，Java 可以从该类之外的地方访问。因为 main 方法是公共的，JVM 就可以轻松的访问执行它。</p>
<h1 id="为什么-main-方法没有返回值（Void）？"><a href="#为什么-main-方法没有返回值（Void）？" class="headerlink" title="为什么 main 方法没有返回值（Void）？"></a>为什么 main 方法没有返回值（Void）？</h1><p>因为 main 返回任何值对程序都没任何意义，所以设计成 void，意味着 main 不会有任何值返回。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>1.main 方法必须声明为 public、static、void，否则 JVM 没法运行程序 。</p>
<p>2.如果 JVM 找不到 main 方法就抛出 NoSuchMethodError:main 异常，例如：如果你运行命令：java HelloWrold，JVM 就会在 HelloWorld.class 文件中搜索 public static void main (String[] args) 方法。</p>
<p>3.main 方式是程序的入口，程序执行的开始处。</p>
<p>4.main 方法被一个特定的线程 ”main” 运行，程序会一直运行直到 main 线程结束或者 non-daemon 线程终止。</p>
<p>5.当你看到“Exception in Thread main”如：Excpetion in Thread main:Java.lang.NullPointedException，意味着异常来自于 main 线程。</p>
<p>6.你可以声明 main 方法使用 java1.5 的可变参数的方式如：publicstaticvoid main(String… args)。</p>
<p>7.除了 static、void、和 public，你可以使用 final，synchronized、和 strictfp 修饰符在 main 方法的签名中，如：publicstrictfpfinalsynchronizedstaticvoid main(String[] args)。</p>
<p>8.main 方法在 Java 可以像其他方法一样被重载，但是 JVM 只会调用上面这种签名规范的 main 方法。</p>
<p>9.你可以使用 throws 子句在方法签名中，可以抛出任何 checked 和 unchecked 异常。</p>
<p>10.静态初始化块在 JVM 调用 main 方法前被执行，它们在类被 JVM 加载到内存的时候就被执行了。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础知识</tag>
      </tags>
  </entry>
  <entry>
    <title>Java基础--类与对象</title>
    <url>/2021/03/22/Java%E5%9F%BA%E7%A1%80-%E5%AF%B9%E8%B1%A1%E4%B8%AD%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<p>Java是一门面向对象的高级语言，而类与对象是理解Java编程思想的两个重要要素。对象是对具体事物的抽象，而类是对对象的抽象。</p>
<p>在这里讲一个老套的笑话：</p>
<blockquote>
<p>每个接触的对象都是别人实例化出来的，要想找到对象，你得自己new一个出来。</p>
<p>而我们想要的对象，都是同一类。</p>
</blockquote>
<span id="more"></span>

<h1 id="什么是类？"><a href="#什么是类？" class="headerlink" title="什么是类？"></a>什么是类？</h1><p>类是一个抽象的概念的集合，表示一类具有共同属性的事物，所以<strong>类当中应该包含属性和方法</strong>。属性，即事物的特征；方法，即事物能做什么。因此，我们在定义类的时候，以及编写类的成员变量以及类的方法。</p>
<p>基于上述描述，类可以表达基本数据类型，如int、char等表达不了的数据信息。所以，类的特征之一是：<strong>类是对象的数据类型。</strong></p>
<p>实例化对象的一般方法是：</p>
<blockquote>
<p>类 对象=new 类（）;</p>
<p>对比参照：int[]  数组名=new int[]；</p>
</blockquote>
<p>不难看出，类跟数组一样，是一种特殊的数据类型。</p>
<p>因此，从内存空间上来看，对象的具体信息与数组的具体信息一样，存储在堆内存当中，通过new关键字开辟。</p>
<p>从作用域来看，类当中包含内部类和外部类。</p>
<p>而类与类之间的关系，主要包含依赖、关联、聚合、组合、继承、实现。</p>
<hr>
<h1 id="什么是对象？"><a href="#什么是对象？" class="headerlink" title="什么是对象？"></a>什么是对象？</h1><p>对象是类的实体，也叫实例化，它具有具体的状态和行为。</p>
<p>对象的组成如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20190902113938617.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9jdWl0,size_16,color_FFFFFF,t_70" alt="对象的组成"></p>
<p>也就是说，对象包含主要包含：<strong>对象头、实例数据、对齐填充</strong>三部分。</p>
<p>如图所示，对象头中前两行是Mark Word关键字，存储的是类的元数据；第三行是指针，指明类的存储位置。</p>
<p>第四行是实例数据的对象属性，如果该实例数据是数组，还得指明数组长度；</p>
<p>最后一行是对齐填充。</p>
<p>简单来说，对象需要包含<strong>对象头（类名以及类的地址）</strong>、<strong>实例数据（默认值以及长度）</strong>、<strong>对其填充</strong>。</p>
<p>调用对象的一般方式是：对象名.成员方法(   )     /   对象名.成员变量</p>
<hr>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><p>使用private关键字进行封装，将类的某些信息隐藏在类的内部，不允许外界直接访问。封装的两大优点：提高代码复用性和安全性。</p>
<p>其中，在进行封装时，若全局变量(成员变量)与局部变量重名，使用this关键字指明全局变量。</p>
<p>同时，java提供了get方法和set方法，便于调用类中的成员变量。</p>
<hr>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><p>所谓构造方法就是用来初始化对象的方法，与之相对应的成员方法，即规定对象的行为。</p>
<p>其语法规则包含：方法名与类名一致、无返回值、可以不指定参数。</p>
<p>构造方法的特征包含：提供默认的无参构造、可重载、不可继承、一旦自定义则不再提供默认方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public 方法名( 非必要参数 )&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>学习</category>
        <category>Java</category>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础语法</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面经</title>
    <url>/2021/04/03/Java%E9%9D%A2%E7%BB%8F/</url>
    <content><![CDATA[<p>最近接到了华东师范大学的复试通知，基于产教融合的模式，去面试了几家公司。</p>
<span id="more"></span>

<h5 id="1-上海软中信息技术有限公司"><a href="#1-上海软中信息技术有限公司" class="headerlink" title="1.上海软中信息技术有限公司"></a>1.上海软中信息技术有限公司</h5><p>考虑到跨专业的原因，没有过多的询问技术经验，一面主要问了各种竞赛经历和项目经历。</p>
<p>Java技术，大概是知道我只恶补了基础部分。</p>
<p>1、问了一下常规的封装、继承、多态等特性。</p>
<p>2、一个算法题，解决思路比较简单：深度优先搜索。细问了回溯的具体实现。</p>
<p>3、问了主要的内排序算法，大概回答梳理了一遍。以为面试官会挑比较难的希尔排序或是快排，没想到只是问了一下冒泡排序，心中狂喜：面试官也太友好了。最好时间复杂度、平均时间复杂度、稳定性，三大必问内容了。</p>
<p>4、问了多线程和输入输出流，还算比较简单，基本没有深入考察。</p>
<p>二面压力面：</p>
<p>1、上来就问，接不接受加班、矛盾冲突怎么解决，好在大学玩过宝洁八大问，加上咸鱼心理，轻松过了。</p>
<p>2、讨价还价，薪资问题，培养模式问题，还有就是要表现出对公司强烈的兴趣和好奇心啦：一个原则–主动主动主动！！！面试官一直设坑，还有什么想问的，并且引导我进行提问，简直变成了对方的提线木偶，被打压的惨不忍睹。</p>
<h5 id="2、Hypers"><a href="#2、Hypers" class="headerlink" title="2、Hypers"></a>2、Hypers</h5><p>暂时只进行了一面，明天先去上海安顿好，6号进行二面：</p>
<p>1、面试官小姐姐也太友好了，居然问返回值？？？以及JDK和JRE是什么？？？由于过于简单，直接把编译工具和运行工具也说了一遍。小姐姐还问了一下编译和运行的过程，好在这个早有准备。</p>
<p>2、问反转字符串，提供了两种解决思路，即栈和循环，小姐姐又深入问了，如何用队列实现栈，勉勉强强算是回答出来了。不过总有种自己坑自己的感觉。</p>
<p>3、后面逐渐加大难度，问了哈希冲突的解决办法以及时间复杂度，中南的初试集中在哈希表的ASL上，这个实在回答的不太好。不过后来还是绕回到同义词的冲突上了，还算扯了一部分。</p>
<p>4、算法部分我给自己挖坑了，谈到了递归、位运算、STL、贪心算法以及动态规划，真的是好后悔呜呜呜。小姐姐直接问动态规划的应用场景！我弱弱地回答没归纳过，大概是类似于背包问题一样的问题？小姐姐狂笑。还好最后举了个爬楼梯的例子，说了一下大概的伪代码，以及解决思路，强行挽尊。</p>
<p>5、最后小姐姐直接让我自己填坑，哪个地方没有回答上来，自己再好好补充。</p>
<h5 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h5><p>问的问题都不难，入门级别，大概是知道我就是个菜鸡吧。也没有特意为难自己，不过Java部分是得好好看看。</p>
<p>几轮下来，发现自己比较擅长的还是算法部分，用算法解决实际问题，这种思考题简直是我的最爱。但是各类算法的应用场景，没有好好归纳过，所以有的时候思考确实会慢很多。</p>
]]></content>
      <categories>
        <category>工作</category>
        <category>面经</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>实习</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常见命令</title>
    <url>/2021/03/23/Linux%E5%B8%B8%E8%A7%81%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h4 id="常见命令："><a href="#常见命令：" class="headerlink" title="常见命令："></a>常见命令：</h4><p>pwd ： 查看当前路径</p>
<p>ls : 查看当前目录文件夹</p>
<p>mkdir ：创建<strong>文件夹</strong></p>
<p>rm：删除文件</p>
<p>touch：创建<strong>文件</strong></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora入门技巧</title>
    <url>/2021/03/22/Typora%E5%85%A5%E9%97%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>本篇文章主要就是记录一下MarkDown语法。md语法在所有支持 <code>.md</code> 的软件都是通用的，而快捷键是在<code>Typora</code>软件中适用的。</p>
<ol>
<li><strong>使用  <code>Ctrl+Shift+K</code>创建代码块：</strong> </li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">右下角 [选择语言]  ：</span><br><span class="line">                  输入 java &#x2F; c++ &#x2F; shell &#x2F; javascript 等任意语言</span><br></pre></td></tr></table></figure>



<span id="more"></span>

<ol start="2">
<li><strong>使用   <code>&gt;</code>   进行引用，效果如下：</strong></li>
</ol>
<blockquote>
<p>   引用内容</p>
</blockquote>
<ol start="3">
<li><strong>使用  <code>#</code> 更改标题大小</strong></li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br></pre></td></tr></table></figure>



<ol start="4">
<li><strong>更改字体格式</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">斜体        *文字内容*</span><br><span class="line">加粗       **文字内容**</span><br><span class="line">删除线      ~~文字内容~~</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <em>斜体</em>            <strong>加粗</strong>             <del>删除线</del></p>
</blockquote>
<ol start="5">
<li><strong>使用 <code>Ctrl+T</code> 建立表格</strong></li>
</ol>
<table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + T</td>
<td align="left">新建表格</td>
</tr>
<tr>
<td align="left">双击Enter</td>
<td align="left">清除所有格式，另起一行</td>
</tr>
<tr>
<td align="left">Ctrl+U</td>
<td align="left"><u>下划线</u></td>
</tr>
<tr>
<td align="left">Ctrl+B</td>
<td align="left"><strong>加粗</strong></td>
</tr>
<tr>
<td align="left">Ctrl+I</td>
<td align="left"><em>斜体</em></td>
</tr>
</tbody></table>
<ol start="6">
<li><strong>使用 <code>---</code>进行分割</strong></li>
</ol>
<hr>
<p>创建一条分割线   —</p>
<hr>
<ol start="7">
<li><strong>图片插入</strong>:  <code>Ctrl+Shift+I</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//本地图片</span></span><br><span class="line">[自定义图片名称]（图片路径）</span><br><span class="line">    </span><br><span class="line">ex: [我的照片]（/images/pic/mine.jpg）</span><br></pre></td></tr></table></figure>



<ol start="8">
<li><strong>超链接</strong>：<code>Ctrl+K</code></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//超链接语法</span></span><br><span class="line"></span><br><span class="line">[我的blog](https:<span class="comment">//eniac286.github.io/)</span></span><br></pre></td></tr></table></figure>

<p>ex： <a href="https://eniac286.github.io/">我的blog</a></p>
<ol start="9">
<li><strong>列表</strong></li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无序列表：+ - * 均可创建</span></span><br><span class="line">- 目录<span class="number">1</span></span><br><span class="line">+ 目录<span class="number">2</span></span><br><span class="line">* 目录<span class="number">3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>目录1   </li>
</ul>
<ul>
<li>目录2</li>
<li>目录3</li>
</ul>
<ol start="10">
<li><strong>使用  <code>ctrl+shift+` </code>   创建特殊标记 ：</strong></li>
</ol>
<p>无特殊标记      <code>有特殊标记</code></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>Typora</category>
      </categories>
      <tags>
        <tag>Typora</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>摘抄--3月24日</title>
    <url>/2021/03/24/%E6%91%98%E6%8A%84--3%E6%9C%8824%E6%97%A5/</url>
    <content><![CDATA[<p>过去的每一天都不曾消失，它们闪烁在未来的天幕上，成为个人的群星，构成属于你自己的浩瀚银河。</p>
<p>然后，在某一刻，哗啦一声，向你奔涌而来。</p>
<p>我相信，每个人心中，都存在对浩瀚的体验。</p>
]]></content>
      <categories>
        <category>文学</category>
        <category>摘抄</category>
      </categories>
      <tags>
        <tag>摘抄</tag>
      </tags>
  </entry>
</search>
